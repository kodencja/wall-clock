{"version":3,"sources":["components/Clock.jsx","App.js","reportWebVitals.js","index.js"],"names":["Clock","state","getStyle","className","this","props","onGetClass","style","onStyle","getHourHandClass","onHourHandStyle","getMinHandClass","onMinHandStyle","getSecHandClass","onSecondHandStyle","Component","App","AppClass","ifHit","clockClass1","clockClass2","hourClass1","minClass1","secClass1","hourClass2","minClass2","secClass2","secondHandStyle","transitionDuration","transform","minHandStyle","hourHandStyle","style1","backgroundColor","style2","opacity","setDate","transitionDurSec","transitionDurMin","transitionDurHour","secRotate","minRotate","hourRotate","clockCl1","clockCl2","AppCl","now","Date","hours","getHours","minutes","getMinutes","secondsDegrees","getSeconds","minutesDeg","hoursDeg","ifWasHit","setState","intervCall","setInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20320c24.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Clock extends Component {\r\n  state = {};\r\n\r\n  getStyle = () => {};\r\n\r\n  render() {\r\n    return (\r\n      // <div className={\"clock \" + this.getClockClass}>\r\n      // <div className={\"clock \"}>{(()=> this.setDate)()}\r\n      // <div className={\"clock \"}>{()=>{()=>{setInterval(this.setDate, 5000)}}}\r\n      <div className={this.props.onGetClass} style={this.props.onStyle}>\r\n        {/* <img src={this.props.onImg} alt=\"Clock back\" /> */}\r\n        {/* <div className={this.props.getClockFaceClass}> */}\r\n        <div className=\"clock-face\">\r\n          <div\r\n            // className={\"hand hour-hand\"} {this.props.getHourHandClass}\r\n            className={\"hand \" + this.props.getHourHandClass}\r\n            style={this.props.onHourHandStyle}\r\n          ></div>\r\n          <div\r\n            // className={\"hand min-hand\"}\r\n            className={\"hand \" + this.props.getMinHandClass}\r\n            style={this.props.onMinHandStyle}\r\n          ></div>\r\n          <div\r\n            // className={\"hand second-hand\"}\r\n            className={\"hand \" + this.props.getSecHandClass}\r\n            // style={this.props.onSecondHandStyle}\r\n            style={this.props.onSecondHandStyle}\r\n            // style={this.props.onSecondHandStyleCopy}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n\r\n// setInterval(() => {\r\n//   this.props.onSetdate();\r\n// }, 1000);\r\n// secondHandStyle: {\r\n//   transitionDuration: \"0.05s\",\r\n//   transform: `rotate(${15}deg)`,\r\n// },\r\n// minHandStyle: {\r\n//   transitionDuration: \"\",\r\n//   transform: \"\",\r\n// },\r\n// hourHandStyle: {\r\n//   transitionDuration: \"\",\r\n//   transform: \"\",\r\n// },\r\n// classClock: \"\",\r\n\r\n// setStyle = () => {\r\n// const { secondsDegrees, minutesDeg, hoursDeg } = this.state;\r\n// console.log(\"setStyle\");\r\n// console.log(this.state.secondsDegrees);\r\n// console.log(this.state.minutesDeg);\r\n//   if (secondsDegrees === 360 || secondsDegrees === 0) {\r\n//     transitionDurSec = \"0s\";\r\n//     clockCl = \"headShake\";\r\n//   } else {\r\n//     transitionDurSec = \"0.05s\";\r\n//     clockCl = \"\";\r\n//   }\r\n//   secRotate = `rotate(${secondsDegrees}deg)`;\r\n\r\n//    minutesDeg = 6 * minutes;\r\n//   if (minutesDeg === 360 || minutesDeg === 0) {\r\n//     minHand.style.transitionDuration = \"0s\";\r\n//     clock.classList.add(\"flip\");\r\n//   } else {\r\n//     minHand.style.transitionDuration = \"0.05s\";\r\n//     clock.classList.remove(\"flip\");\r\n//   }\r\n//   minHand.style.transform = `rotate(${minutesDeg}deg)`;\r\n\r\n//   hoursDeg = hours * 30 + 30 * (minutesDeg / 360);\r\n//   //\t\t  console.log(hoursDeg);\r\n//   if (hoursDeg === 360 || hoursDeg === 0)\r\n//     hourHand.style.transitionDuration = \"0s\";\r\n//   else hourHand.style.transitionDuration = \"0.05s\";\r\n//   hourHand.style.transform = `rotate(${hoursDeg}deg)`;\r\n\r\n//   this.setState({ secondHandStyle: { transitionDuration: transitionDur } });\r\n// };\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Clock from './components/Clock';\n\nclass App extends Component {\n  state = {\n    AppClass: \"\",\n    ifHit: false,\n    clockClass1: \"\",\n    clockClass2: \"\",\n    hourClass1: \"hour-hand-1\",\n    minClass1: \"min-hand-1\",\n    secClass1: \"second-hand-1\",\n    hourClass2: \"hour-hand-2\",\n    minClass2: \"min-hand-2\",\n    secClass2: \"second-hand-2\",\n    secondHandStyle: {\n      transitionDuration: \"\",\n      transform: \"\",\n    },\n    minHandStyle: {\n      transitionDuration: \"\",\n      transform: \"\",\n    },\n    hourHandStyle: {\n      transitionDuration: \"\",\n      transform: \"\",\n    },\n    style1: {\n      backgroundColor: '#018fed9a'\n    },\n    style2: {\n      transform: `rotateY(${180}deg)`,\n      opacity: 0,\n    }\n   }\n\n   componentDidMount() {\n    this.intervCall();\n  }\n\n   setDate = () => {\n    const now = new Date();\n    const hours = now.getHours();\n    const minutes = now.getMinutes();\n    const seconds = now.getSeconds();\n    const secondsDegrees = seconds *6;\n    const minutesDeg = 6 * minutes;\n    const hoursDeg = hours * 30 + 30 * (minutesDeg / 360);\n    \n    let transitionDurSec,\n      transitionDurMin,\n      transitionDurHour,\n      secRotate,\n      minRotate,\n      hourRotate,\n      clockCl1,\n      clockCl2,\n      AppCl,\n      ifWasHit=this.state.ifHit;\n\n    if (secondsDegrees >= 0 && secondsDegrees <= 9) {\n      transitionDurSec = \"0s\";\n      clockCl1 = \"flipOpen\";\n      ifWasHit = true;\n    } \n    else if (secondsDegrees > 9 && secondsDegrees <=22){\n      transitionDurSec = \"0.05s\";\n      clockCl1 = \"flipOpen\";\n      if(this.state.ifHit === true){\n        clockCl2 = \"disappear\";\n      }\n        AppCl = \"hit\";     \n    } \n    else if(secondsDegrees > 22 && secondsDegrees < 180){\n      if(this.state.ifHit === true){\n        clockCl2 = \"disappear\";\n      }\n      transitionDurSec = \"0.05s\";\n      AppCl = \"\";\n    } \n    else {\n      transitionDurSec = \"0.05s\";\n    }\n    secRotate = `rotate(${secondsDegrees}deg)`;\n\n    if (minutesDeg === 360 || minutesDeg === 0) {\n      transitionDurMin = \"0s\";\n    } else {\n      transitionDurMin = \"0.05s\";\n    }\n    minRotate = `rotate(${minutesDeg}deg)`;\n\n    if (hoursDeg === 360 || hoursDeg === 0) transitionDurHour = \"0s\";\n    else transitionDurHour = \"0.05s\";\n    hourRotate = `rotate(${hoursDeg}deg)`;\n\n    this.setState({\n      AppClass: AppCl,\n      ifHit: ifWasHit,\n      clockClass1: clockCl1,\n      clockClass2: clockCl2,\n      secondHandStyle: {\n        transitionDuration: transitionDurSec,\n        transform: secRotate,\n      },\n      minHandStyle: {\n        transitionDuration: transitionDurMin,\n        transform: minRotate,\n      },\n      hourHandStyle: {\n        transitionDuration: transitionDurHour,\n        transform: hourRotate,\n      },\n    });\n  };\n\n  intervCall = () => {\n    setInterval(() => {\n      this.setDate();\n    }, 1000);\n  };\n\n  render() { \n    return ( \n      <div className={\"App \"+this.state.AppClass}>\n        <div className=\"title\">Wall clock animation</div>\n        <div className=\"container\">\n          \n        <Clock onGetClass={\"clock1 \"+ this.state.clockClass1} getHourHandClass={this.state.hourClass1} getMinHandClass={this.state.minClass1} getSecHandClass={this.state.secClass1} onHourHandStyle={this.state.hourHandStyle}\n        onMinHandStyle={this.state.minHandStyle} \n        onSecondHandStyle={this.state.secondHandStyle} onStyle={this.state.style1} />\n\n        <Clock onGetClass={\"clock2 \"+ this.state.clockClass2} getHourHandClass={this.state.hourClass2} getMinHandClass={this.state.minClass2} getSecHandClass={this.state.secClass2} onHourHandStyle={this.state.hourHandStyle}\n        onMinHandStyle={this.state.minHandStyle}\n         onStyle={this.state.style2}\n       />  \n        </div>\n       <div className=\"foot\"><h3>2020 <i>by kodencja</i></h3></div>\n      </div>\n     );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}